# Script de d√©ploiement pour l'application de messagerie
Write-Host "üöÄ D√©marrage du d√©ploiement..." -ForegroundColor Green

# V√©rifier si Docker est install√©
try {
    docker --version | Out-Null
    Write-Host "‚úÖ Docker est install√©" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker n'est pas install√©. Veuillez installer Docker Desktop pour Windows" -ForegroundColor Red
    exit 1
}

# V√©rifier si le fichier .env existe
if (-not (Test-Path .env)) {
    Write-Host "‚ö†Ô∏è Le fichier .env n'existe pas. Cr√©ation..." -ForegroundColor Yellow
    @"
# Configuration de l'application
NODE_ENV=production
PORT=5000

# Base de donn√©es MongoDB
MONGODB_URI=mongodb://mongodb:27017/messenger

# Redis
REDIS_URL=redis://redis:6379

# JWT
JWT_SECRET=$(New-Guid)

# Configuration SSL
SSL_CERT_PATH=/etc/nginx/ssl/server.crt
SSL_KEY_PATH=/etc/nginx/ssl/server.key
"@ | Out-File -FilePath .env -Encoding UTF8
    Write-Host "‚úÖ Fichier .env cr√©√©" -ForegroundColor Green
}

# V√©rifier si les certificats SSL existent
if (-not (Test-Path "backend\nginx\ssl\server.key") -or -not (Test-Path "backend\nginx\ssl\server.crt")) {
    Write-Host "‚ö†Ô∏è Certificats SSL manquants. Cr√©ation..." -ForegroundColor Yellow
    
    # Cr√©er le dossier ssl s'il n'existe pas
    if (-not (Test-Path "backend\nginx\ssl")) {
        New-Item -ItemType Directory -Force -Path "backend\nginx\ssl" | Out-Null
    }

    # V√©rifier si OpenSSL est install√©
    try {
        openssl version | Out-Null
    } catch {
        Write-Host "‚ùå OpenSSL n'est pas install√©. Installation..." -ForegroundColor Red
        # Essayer d'installer OpenSSL via winget
        try {
            winget install OpenSSL
        } catch {
            Write-Host "‚ùå Impossible d'installer OpenSSL. Veuillez l'installer manuellement" -ForegroundColor Red
            exit 1
        }
    }

    # G√©n√©rer les certificats
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout "backend\nginx\ssl\server.key" -out "backend\nginx\ssl\server.crt" -subj "/CN=localhost"
    Write-Host "‚úÖ Certificats SSL cr√©√©s" -ForegroundColor Green
}

# Arr√™ter les conteneurs existants
Write-Host "üõë Arr√™t des conteneurs existants..." -ForegroundColor Yellow
docker-compose down

# Nettoyer les images non utilis√©es
Write-Host "üßπ Nettoyage des images non utilis√©es..." -ForegroundColor Yellow
docker system prune -f

# Reconstruire et d√©marrer les conteneurs
Write-Host "üèóÔ∏è Construction et d√©marrage des conteneurs..." -ForegroundColor Yellow
docker-compose up -d --build

# V√©rifier que les conteneurs sont en cours d'ex√©cution
Write-Host "üîç V√©rification des conteneurs..." -ForegroundColor Yellow
$containers = docker-compose ps -q
$running = docker ps -q

if ($containers.Count -eq $running.Count) {
    Write-Host "‚úÖ Tous les conteneurs sont en cours d'ex√©cution" -ForegroundColor Green
} else {
    Write-Host "‚ùå Certains conteneurs ne sont pas d√©marr√©s" -ForegroundColor Red
    docker-compose ps
    exit 1
}

# V√©rifier les logs pour les erreurs
Write-Host "üìã V√©rification des logs..." -ForegroundColor Yellow
$logs = docker-compose logs --tail=50
if ($logs -match "error|Error|ERROR") {
    Write-Host "‚ö†Ô∏è Des erreurs ont √©t√© d√©tect√©es dans les logs" -ForegroundColor Yellow
    Write-Host $logs
} else {
    Write-Host "‚úÖ Aucune erreur d√©tect√©e dans les logs" -ForegroundColor Green
}

Write-Host "‚ú® D√©ploiement termin√© avec succ√®s!" -ForegroundColor Green
Write-Host "üåê L'application est accessible sur https://localhost" -ForegroundColor Cyan
Write-Host "üìù Pour voir les logs en temps r√©el: docker-compose logs -f" -ForegroundColor Cyan
Write-Host "üõë Pour arr√™ter l'application: docker-compose down" -ForegroundColor Cyan 